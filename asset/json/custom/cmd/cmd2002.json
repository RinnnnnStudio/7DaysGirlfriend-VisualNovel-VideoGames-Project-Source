{
    "compAutoOrderLimitHeight": 0,
    "id": 2002,
    "blockList": [
        {
            "name": "发送消息",
            "blockAttrs": [
                {
                    "attr": {
                        "id": "125558350380_0.5668059027689019",
                        "varName": "useVar",
                        "varType": 0,
                        "compData": {
                            "compType": 2,
                            "compParam": {
                                "items": "常量,变量",
                                "showIndex": false
                            }
                        },
                        "defaultValue": "",
                        "hideMode": false,
                        "useCommand": false,
                        "onlyPointTo": false,
                        "moduleID": 1,
                        "dataStructureID": 1,
                        "arrayMode": false,
                        "arrayLength": 100,
                        "arrayAllowDelete": false,
                        "arrayAllowSwap": false,
                        "arrayAllowUpdate": false,
                        "accessMode": 1,
                        "syncMode": 0,
                        "attrTips": "",
                        "alias": "模式",
                        "onlyConfig": false,
                        "preview": false,
                        "autoTitleWidth": false,
                        "titleWidth": 0,
                        "eyeShow": true,
                        "lockBlock": false,
                        "enumEnable_get": true,
                        "enumEnable_set": true
                    },
                    "attrConditions": [],
                    "y": 15,
                    "x": 317,
                    "width": 125,
                    "height": 32
                },
                {
                    "attr": {
                        "id": "125457362523_0.8898277721880472",
                        "varName": "actor",
                        "varType": 4,
                        "compData": {
                            "compType": 1002,
                            "compParam": {}
                        },
                        "defaultValue": "1",
                        "hideMode": false,
                        "useCommand": false,
                        "onlyPointTo": true,
                        "moduleID": 2,
                        "dataStructureID": 1,
                        "arrayMode": false,
                        "arrayLength": 100,
                        "arrayAllowDelete": false,
                        "arrayAllowSwap": false,
                        "arrayAllowUpdate": false,
                        "accessMode": 1,
                        "syncMode": 0,
                        "attrTips": "",
                        "alias": "角色",
                        "onlyConfig": false,
                        "preview": false,
                        "autoTitleWidth": true,
                        "titleWidth": 100,
                        "eyeShow": true,
                        "lockBlock": false,
                        "enumEnable_get": true,
                        "enumEnable_set": true
                    },
                    "attrConditions": [
                        {
                            "attrID": "125558350380_0.5668059027689019",
                            "value": 0,
                            "isExpression": false,
                            "jsCode": null,
                            "tsCode": null,
                            "codeName": null
                        }
                    ],
                    "y": 15,
                    "x": 20,
                    "width": 271,
                    "height": 32
                },
                {
                    "attr": {
                        "id": "125558373533_0.2468499232025969",
                        "varName": "actorVarID",
                        "varType": 0,
                        "compData": {
                            "compType": 6,
                            "compParam": {}
                        },
                        "defaultValue": "1",
                        "hideMode": false,
                        "useCommand": false,
                        "onlyPointTo": true,
                        "moduleID": 2,
                        "dataStructureID": 1,
                        "arrayMode": false,
                        "arrayLength": 100,
                        "arrayAllowDelete": false,
                        "arrayAllowSwap": false,
                        "arrayAllowUpdate": false,
                        "accessMode": 1,
                        "syncMode": 0,
                        "attrTips": "",
                        "alias": "角色",
                        "onlyConfig": false,
                        "preview": false,
                        "autoTitleWidth": true,
                        "titleWidth": 100,
                        "eyeShow": true,
                        "lockBlock": false,
                        "enumEnable_get": true,
                        "enumEnable_set": true
                    },
                    "attrConditions": [
                        {
                            "attrID": "125558350380_0.5668059027689019",
                            "value": 1,
                            "isExpression": false,
                            "jsCode": null,
                            "tsCode": null,
                            "codeName": null
                        }
                    ],
                    "y": 15,
                    "x": 20,
                    "width": 271,
                    "height": 32
                },
                {
                    "attr": {
                        "id": "125471611053_0.8665977531366034",
                        "varName": "mode",
                        "varType": 0,
                        "compData": {
                            "compType": 2,
                            "compParam": {
                                "items": "左边,右边",
                                "showIndex": false
                            }
                        },
                        "defaultValue": "",
                        "hideMode": false,
                        "useCommand": false,
                        "onlyPointTo": false,
                        "moduleID": 1,
                        "dataStructureID": 1,
                        "arrayMode": false,
                        "arrayLength": 100,
                        "arrayAllowDelete": false,
                        "arrayAllowSwap": false,
                        "arrayAllowUpdate": false,
                        "accessMode": 1,
                        "syncMode": 0,
                        "attrTips": "",
                        "alias": "位置",
                        "onlyConfig": false,
                        "preview": false,
                        "autoTitleWidth": false,
                        "titleWidth": 0,
                        "eyeShow": true,
                        "lockBlock": false,
                        "enumEnable_get": true,
                        "enumEnable_set": true
                    },
                    "attrConditions": [],
                    "y": 106,
                    "x": 20,
                    "width": 125,
                    "height": 32
                },
                {
                    "attr": {
                        "id": "125457751241_0.5908808857833339",
                        "varName": "content",
                        "varType": 1,
                        "compData": {
                            "compType": 13,
                            "compParam": {
                                "modeType": 0,
                                "rootPath": "asset/image/",
                                "formatType": "png,jpg,jpeg"
                            }
                        },
                        "defaultValue": "",
                        "hideMode": false,
                        "useCommand": false,
                        "onlyPointTo": false,
                        "moduleID": 1,
                        "dataStructureID": 1,
                        "arrayMode": false,
                        "arrayLength": 100,
                        "arrayAllowDelete": false,
                        "arrayAllowSwap": false,
                        "arrayAllowUpdate": false,
                        "accessMode": 1,
                        "syncMode": 0,
                        "attrTips": "",
                        "alias": "图片",
                        "onlyConfig": false,
                        "preview": false,
                        "autoTitleWidth": false,
                        "titleWidth": 0,
                        "eyeShow": true,
                        "lockBlock": false,
                        "enumEnable_get": true,
                        "enumEnable_set": true
                    },
                    "attrConditions": [],
                    "y": 61,
                    "x": 20,
                    "width": 425,
                    "height": 32
                },
                {
                    "attr": {
                        "id": "125552462403_0.2967695015866325",
                        "varName": "continueByClick",
                        "varType": 2,
                        "compData": {
                            "compType": 15,
                            "compParam": {}
                        },
                        "defaultValue": "1",
                        "hideMode": false,
                        "useCommand": false,
                        "onlyPointTo": false,
                        "moduleID": 1,
                        "dataStructureID": 1,
                        "arrayMode": false,
                        "arrayLength": 100,
                        "arrayAllowDelete": false,
                        "arrayAllowSwap": false,
                        "arrayAllowUpdate": false,
                        "accessMode": 1,
                        "syncMode": 0,
                        "attrTips": "",
                        "alias": "点击后继续执行",
                        "onlyConfig": false,
                        "preview": false,
                        "autoTitleWidth": true,
                        "titleWidth": 100,
                        "eyeShow": true,
                        "lockBlock": false,
                        "enumEnable_get": true,
                        "enumEnable_set": true
                    },
                    "attrConditions": [],
                    "y": 107,
                    "x": 167,
                    "width": 200,
                    "height": 32
                }
            ],
            "blockCondition": [],
            "blockHeight": 162,
            "autoOrder": true,
            "hideBlockTitle": true,
            "cmdColor": "#fff04c"
        }
    ],
    "isCustomPhraseDesc": true,
    "compAutoOrder": false,
    "fastModifyAttribute": true,
    "customPhraseDescTS": "// 根据属性名称值编写自定义短语描述，如：\"我的短语是\"+attrs.xxx\n// 使用下拉框组件的变量attrs.xxx有对应的attrs.xxxItems的属性以便获得标签名集合\n// 获取自定义模块的数据名称的函数：getModuleDataName(moduleID:number,dataID:number):string;\n// 获取各种列表内数据名称的函数：getTypeDataListName(typeID: number, dataID: number):string;\n// 获取自定义游戏数值描述的函数：getCustomGameNumber(customGameNumber: any[]):string;\n// 获取自定义游戏字符串描述的函数：getCustomGameString(customGameString: any[]):string;\n// 获取自定义游戏开关描述的函数：：getCustomGameSwitch(customGameSwitch: any[]):string;\n// -- typeID ：0-全局变量 1-全局开关 2-全局字符串 3-玩家变量 4-玩家开关 5-玩家字符串\n//           ：6-场景列表 7-场景对象原型列表 8-图块列表 9-行走图列表 10-行走图动作列表 11-立绘列表 12-立绘表情列表\n//           ：13-事件库列表 14-对话框列表 15-动画列表 16-动画信号列表 17-界面列表 18-数据结构列表 19-自定义模块列表\n//           ：20-自定义指令列表 21-自定义行为列表 22-自动元件列表 23-行走图部件列表 24-立绘部件列表 25-材质列表 26-场景对象模块\nlet PLUGIN_MODULE_TYPE_CHAT_ACTOR: number = 2;\nlet str = ``;\nvar actorName = attrs.useVar ? `@${attrs.actorVarID}-${getTypeDataListName(3, attrs.actorVarID)}` : getModuleDataName(PLUGIN_MODULE_TYPE_CHAT_ACTOR, attrs.actor);\nstr += `${attrs.modeItems[attrs.mode]}「${actorName}」：${attrs.continueByClick ? \"※\" : \"\"}`;\nlet content = attrs.content ? attrs.content.split(\"/\").pop() : \"\";\nstr += content;\nstr;",
    "customPhraseDescJS": "var PLUGIN_MODULE_TYPE_CHAT_ACTOR = 2;\nvar str = \"\";\nvar actorName = attrs.useVar ? \"@\" + attrs.actorVarID + \"-\" + getTypeDataListName(3, attrs.actorVarID) : getModuleDataName(PLUGIN_MODULE_TYPE_CHAT_ACTOR, attrs.actor);\nstr += attrs.modeItems[attrs.mode] + \"\\u300C\" + actorName + \"\\u300D\\uFF1A\" + (attrs.continueByClick ? \"※\" : \"\");\nvar content = attrs.content ? attrs.content.split(\"/\").pop() : \"\";\nstr += content;\nstr;\n",
    "cmdPreviewTS": "//------------------------------------------------------------------------------------------------------\n// 编辑器预览窗口运行时提供的系统变量\n// 关于预览的流程：\n// -- 1.imageLayerPassageClear 每已使用的通道x每已使用的指令\n// -- 2.runCommand 每个指令按顺序执行一遍\n// -- 3.imageLayerPassageStart 每已使用的通道x每已使用的指令\n// 关于播放的流程\n// -- 1.imageLayerPassageClear 每已使用的通道x每已使用的指令\n// -- 2.runCommand 每个指令按顺序播放\n//------------------------------------------------------------------------------------------------------\n/**\n * 当前自定义指令的编号\n */\ndeclare var commandID: number;\n/**\n * 图像层通道数据\n */\ndeclare var imageLayerPassageData: any[];\n/**\n * 游戏层显示对象容器（包含界面层与图像层）\n */\ndeclare var gameLayer: GameSprite;\n/**\n * 图像层显示对象容器\n */\ndeclare var imageLayer: GameImageLayer;\n/**\n * 界面层显示对象容器\n */\ndeclare var uiLayer: GameSprite;\n/**\n * 预览窗口\n */\ndeclare var previewWin: {\n    /**\n     * 清理全部事件指令产生的预览效果\n     */\n    clearData: Function;\n    /**\n     * 设置数据，刷新预览效果直到当前选中的指令行\n     */\n    setData: Function;\n    /**\n     * 当前选中的指令\n     */\n    currentSelectCmd: Command;\n    /**\n     * 视图区域是否右键移动过\n     */\n    viewAreaRightMouseMove: boolean;\n    /**\n     * 允许显示全部对象\n     */\n    allowAllDisplayObject: boolean;\n    /**\n     * 播放指令时候等待（开启后将一直处于等待状态，直到关闭后继续执行）\n     */\n    playUpdateWait: boolean;\n    /**\n     * 对象操作工具\n     */\n    operateObjectTool: {\n        // 刷新对象操作工具，比如来自其他地方更改了对象的位置或尺寸等，可使用该函数刷新\n        refresh: Function;\n        // 选中对象\n        selectObjects: (sp: GameSprite[]) => void;\n        // 需要排除缩放和旋转工具的对象\n        addExcludeOperactionObject: (sp: GameSprite) => void\n    }\n    /**\n     * 图像层镜头操作工具\n     * onChange(changeType:number,cameraX:number,cameraY:number,cameraZ:number,cameraRotation:number)\n     */\n    openCameraTools: (onChange: Function) => void;\n    /**\n     * 刷新图像层镜头工具，根据当前镜头值\n     */\n    refreshCameraTools: Function;\n    /**\n     * 选中事件指令\n     * @param cmd 事件指令\n     * @param sendEvent 派发事件 默认=false 派发事件会刷新属性栏、预览窗口等\n     */\n    selectCmdMessageByCmd(cmd: Command, sendEvent?: boolean);\n    /**\n     * 修改指令属性\n     * @param cmd 需要修改的指令\n     * @param varName 参数变量名称\n     * @param newValue 新的值\n     */\n    modifyCommandParam: (cmd: Command, varName: string, newValue: any) => void;\n    /**\n     * 新增指令 默认是默认值，如果有写入参数的话则以参数为准 varNameValue\n     * @param customID 自定义ID\n     * @param varNameValue 额外的变量值，如存在则优先使用该值，否则使用自定义编辑器中的默认值，如 {dpX:100,dpY:200}\n     * @param selectedIndex [可选] 默认值=-2  -3=当前选中（之后） -2=当前选中（之前） -1=最尾端 0-N=自定义 \n     * @param refreshPreViewArea [可选] 默认值=true 刷新预览区\n     */\n    insertCustomCMD(customID: number, varNameValue: any, selectedIndex?: number, refreshPreViewArea?: boolean): Command;\n    /**\n     * 新增加系统指令\n     * @param cmdID 系统指令ID\n     * @param params 参数\n     * @param selectedIndex [可选] 默认值=-2 默认值=-2  -3=当前选中（之后） -2=当前选中（之前） -1=最尾端 0-N=自定义 \n     * @param refreshPreViewArea [可选] 默认值=false 刷新预览区\n     */\n    insertSystemCMD(cmdID: number, params: any[], selectedIndex?: number, refreshPreViewArea?: boolean): Command;\n    /**\n     * 更改显示层\n     * @param selectedIndex 0-界面层 1-图像层\n     */\n    changeLayer(selectedIndex: number): void;\n    /**\n     * 创建菜单\n     * var menuData:any[] = [\n               {\n                   label:\"重命名\",\n                   splitLine:false,// 是否显示分割线\n                   children:[], // 存放和本身这个对象是一样的格式\n                   execute:\"functionName\", // 点击后执行的方法名称\n                   shortcutKey:\"\", //显示的快捷键名称\n                   menuHotKey:\"\", //实际作用的快捷键名称 对应Laya.KeyBoard的值 如A\n                   enabled:true, // 是否可用，不填写表示true\n                   visible:true, // 是否显示，不填写表示true\n                   selected:true, // 如果存在则以打钩的形式选择此项\n                   group:\"myGroupName\" // 配合selected，如若存在则同组单选\n               }\n           ];\n     * @param menuData 菜单数据\n     * @param x 全局坐标X\n     * @param y 全局坐标Y\n     * @param executeDomain 函数作用域\n     */\n    createMenu(menuData: any[], x: number, y: number, executeDomain: any);\n}\n/**\n * 编辑器预览接口\n */\ndeclare var editor: Editor;\n//------------------------------------------------------------------------------------------------------\n// 通道数据\n//------------------------------------------------------------------------------------------------------\ndeclare class PassageData {\n    // ====> system 必要项\n    /**\n     * 通道编号\n     */\n    passageID: number;\n    /**\n     * 类别，一般用于区分显示对象，如图片、动画、立绘、界面都是属于不同的类别\n     */\n    type: string;\n    /**\n     * 记录关联的指令\n     */\n    cmd: Command;\n    /**\n     * 当通道覆盖时调用的函数，以便清理掉。如显示了2号图片或移动了号图片，再次显示2号图片时会清理掉此前显示的图片或移动行为\n     */\n    onCoverPassage: Function;\n    // ====> custom 自定义属性\n\n}\n//------------------------------------------------------------------------------------------------------\n// 自定义变量\n//------------------------------------------------------------------------------------------------------\nvar passageType = \"gcChatBoxMessage\";\n//------------------------------------------------------------------------------------------------------\n// [everyone used command] 逐指令行目执行\n//------------------------------------------------------------------------------------------------------\n/**\n * 逐指令执行：对应事件下按照从上至下的顺序逐行执行，如果是该自定义指令时则会执行该函数\n * 该函数用于编辑器预览和播放，如果分歧面板中筛选不经过的事件指令则不会执行该函数。\n * 比如事件页中有3个该指令，则按照顺序执行3次该函数\n * @param cmdParams 指令的自定义参数数据，根据用户设定值\n * @param cmd 对应的指令对象\n * @param isPlayMode 是否是播放模式，否则是普通的预览模式\n */\nfunction runCommand(cmdParams: ThisCommandParams, cmd: Command, isPlayMode: boolean) {\n    // 是否清理\n    let isClear = !isPlayMode || self[`___chatboxNeedClear`];\n    // 显示基本面板\n    let chatbox = showChatBox(isClear);\n    if (isPlayMode) {\n        self[`___chatboxNeedClear`] = null;\n        if (cmdParams.continueByClick) {\n            previewWin.playUpdateWait = true;\n            gameLayer.parent.once(EventObject.CLICK, this, () => {\n                previewWin.playUpdateWait = false;\n            })\n        }\n    }\n    else {\n        self[`___chatboxNeedClear`] = true;\n    }\n    chatbox.sendImageMessage(cmdParams.actor, cmdParams.content, cmdParams.mode == 0);\n}\n/**\n * 编辑器内预览播放时预加载\n * @param onFin 加载完成后回调\n * @param cmdParams 指令的自定义参数数据，根据用户设定值\n */\nfunction inEditorPlayPreload(onFin: Function, cmdParams: ThisCommandParams) {\n    // 当加载完成后调用回调\n    onFin.apply(this);\n}\n//------------------------------------------------------------------------------------------------------\n// 属性面板修改：当修改该指令的属性时，只会执行该指令对应的「指令源」的这些函数\n// 如A指令来自自定义指令32号，每次通过属性面板快速修改A指令的参数b时，则会执行32号指令的下面2个函数\n// [current used command] \n//------------------------------------------------------------------------------------------------------\n/**\n * 当属性面板中的属性修改前\n * @param cmd 对应的指令\n * @param cmdParams 对应指令的参数 \n * @param varName 修改的属性名\n */\nfunction onCommandAttributeBeforeChange(cmd: Command, cmdParams: ThisCommandParams, varName: string) {\n\n}\n/**\n * 当属性面板中的属性修改后\n * @param cmd 对应的指令\n * @param cmdParams 对应指令的参数 \n * @param varName 修改的属性名\n * @param newValue 修改后的值\n */\nfunction onCommandAttributeChange(cmd: Command, cmdParams: ThisCommandParams, varName: string, value: any) {\n    if (varName == \"content\" || varName == \"mode\" || varName == \"actor\") {\n        previewWin.setData(false);\n    }\n}\n//------------------------------------------------------------------------------------------------------\n// 对象操作工具\n// [everyone used command type] 遍历每个执行过的自定义指令类别\n//------------------------------------------------------------------------------------------------------\n/**\n * 当操作工具移动对象时\n * @param realSelObjs 选中的对象\n */\nfunction imageLayerOnToolsChangePostion(realSelObjs: GameSprite[]): void {\n\n}\n/**\n * 当操作工具缩放时\n * @param realSelObjs 选中的对象\n */\nfunction imageLayerOnToolsChangeSize(realSelObjs: GameSprite[]) {\n\n}\n/**\n * 当操作工具旋转时\n * @param realSelObjs 选中的对象\n */\nfunction imageLayerOnToolsChangeRotation(realSelObjs: GameSprite[]) {\n\n}\n/**\n * 当操作工具开始操作时\n */\nfunction imageLayerOnToolsChangeStart(realSelObjs: GameSprite[]) {\n\n}\n/**\n * 当操作工具结束操作时\n */\nfunction imageLayerOnToolsChangeEnd(realSelObjs: GameSprite[]) {\n\n}\n/**\n * 当操作工具选中对象时\n */\nfunction imageLayerOnToolsSelectObject(realSelObjs: GameSprite[]) {\n\n}\n//------------------------------------------------------------------------------------------------------\n// 图像层相关 遍历每个已使用的通道，每个已使用的通道再遍历已使用的指令，调用下面的函数\n// [everyone passage] x [everyone used command type]\n//------------------------------------------------------------------------------------------------------\n/**\n * 清理函数：每次刷新前调用此函数进行清理\n * @param passageID 通道\n * @param passageData 通道储存的数据\n */\nfunction imageLayerPassageClear(passageID: number, passageData: PassageData) {\n    // -- 该通道数据是当前指令的话\n    if (passageData.type == passageType) {\n\n    }\n}\n/**\n * 开始函数\n * @param passageID 通道\n * @param passageData 通道储存的数据\n */\nfunction imageLayerPassageStart(passageID: number, passageData: PassageData) {\n    // -- 该通道数据是当前指令的话\n    if (passageData.type == passageType) {\n\n    }\n}\n//------------------------------------------------------------------------------------------------------\n//  游戏运行时中有但编辑器没有的情况\n//------------------------------------------------------------------------------------------------------\nfunction showChatBox(isClear: boolean): GUI_ChatBox {\n    let chatbox: GUI_ChatBox = self[\"__chatbox\"];\n    if (chatbox == null) {\n        chatbox = self[\"__chatbox\"] = new GUI_ChatBox;\n    }\n    uiLayer.addChildAt(chatbox, 0);\n    chatbox.mouseEnabled = false;\n    if (isClear) {\n        if (self[`__previewChatBoxFrame`] != __fCount) {\n            self[`__previewChatBoxFrame`] = __fCount;\n            chatbox.clearMessages();\n        }\n    }\n    return chatbox;\n}\n//  定义\nlet PLUGIN_GUI_CHAT_MAIN_UI: number = 4;\nlet PLUGIN_GUI_CHAT_1: number = 1007;\nlet PLUGIN_GUI_CHAT_2: number = 1008;\nlet PLUGIN_GUI_CHAT_3: number = 1009;\n\nif (typeof self[`GUI_${PLUGIN_GUI_CHAT_MAIN_UI}`] == \"undefined\") {\n    class GUI_4 extends GUI_BASE {\n        background: UIBitmap;\n        titleBackground: UIBitmap;\n        title: UIString;\n        dialogList: UIRoot;\n        constructor() {\n            super(PLUGIN_GUI_CHAT_MAIN_UI);\n        }\n    }\n    class GUI_1007 extends GUI_BASE {\n        face: UIBitmap;\n        background: UIBitmap;\n        contentText: UIString;\n        contentImage: UIBitmap;\n        contentAnimation: UIAnimation;\n        constructor() {\n            super(PLUGIN_GUI_CHAT_1);\n        }\n    }\n    class GUI_1008 extends GUI_BASE {\n        face: UIBitmap;\n        background: UIBitmap;\n        contentText: UIString;\n        contentImage: UIBitmap;\n        contentAnimation: UIAnimation;\n        constructor() {\n            super(PLUGIN_GUI_CHAT_2);\n        }\n    }\n    class GUI_1009 extends GUI_BASE {\n        contentText: UIString;\n        constructor() {\n            super(PLUGIN_GUI_CHAT_3);\n        }\n    }\n    self[\"GUI_\" + PLUGIN_GUI_CHAT_MAIN_UI] = GUI_4;\n    self[\"GUI_\" + PLUGIN_GUI_CHAT_1] = GUI_1007;\n    self[\"GUI_\" + PLUGIN_GUI_CHAT_2] = GUI_1008;\n    self[\"GUI_\" + PLUGIN_GUI_CHAT_3] = GUI_1009;\n    let oldGameDataGetModuleData = self[`GameData`].getModuleData\n    self[`GameData`].getModuleData = function (moduleID: number, dataID: number): any {\n        if (moduleID == PLUGIN_MODULE_TYPE_CHAT_ACTOR) {\n            let a = editor.module.getModuleData(moduleID, dataID);\n            if (a) a = a.attrs;\n            else return null;\n            return {\n                id: dataID,\n                name: editor.module.getModuleDataName(moduleID, dataID),\n                face: a.face.value,\n                intro: a.intro.value\n            }\n        }\n        return oldGameDataGetModuleData.apply(this, arguments);\n    }\n}\n//  编辑器加载脚本\nif (!self[\"__chatboxInit\"]) {\n    self[\"__chatboxInit\"] = 1;\n    let tsconfig = `Game/tsconfig.json`;\n    AssetManager.loadJson(tsconfig, Callback.New((tsconfigObj: any) => {\n        let dirPath = `Game/dist`;\n        if (tsconfigObj && tsconfigObj.compilerOptions && tsconfigObj.compilerOptions.outFile) {\n            let outFileArr = tsconfigObj.compilerOptions.outFile.split(`/`);\n            outFileArr.pop();\n            dirPath = `Game/${outFileArr.join(`/`)}`;\n        }\n        let url = dirPath + \"/game/project/ui/GUI_ChatBox.js\"\n        AssetManager.loadText(url, Callback.New((txt: string) => {\n            if (!txt) {\n                let plugURL = dirPath + \"/GCplug/727/GUI_ChatBox.js\"\n                AssetManager.loadText(plugURL, Callback.New((txt: string) => {\n                    if (!txt) {\n                        self[\"__chatboxInit\"] = 0;\n                        return;\n                    }\n                    runJS(txt, url);\n                    self[\"__chatboxInit\"] = 2;\n                }, this));\n                return;\n            }\n            runJS(txt, url);\n            self[\"__chatboxInit\"] = 2;\n        }, this));\n    }, this));\n}\nfunction runJS(jsText: string, url: string, catchError = false) {\n    var script = document.createElement(\"script\");\n    script.type = \"text/javascript\";\n    script['name'] = url;\n    document.body.appendChild(script);\n    setTimeout((script: HTMLScriptElement) => {\n        document.body.removeChild(script);\n    }, 0, script);\n    if (catchError) {\n        // 单体抓取错误会出错，应该是域的问题，如有必要再整体抓取并运行\n        script.appendChild(document.createTextNode(\"try{\" + jsText + \"}catch(e){trace('\" + url + \"',e)}\"));\n    }\n    else {\n        script.appendChild(document.createTextNode(jsText));\n    }\n}",
    "cmdPreviewJS": "var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar _this = this;\nvar passageType = \"gcChatBoxMessage\";\nfunction runCommand(cmdParams, cmd, isPlayMode) {\n    var isClear = !isPlayMode || self[\"___chatboxNeedClear\"];\n    var chatbox = showChatBox(isClear);\n    if (isPlayMode) {\n        self[\"___chatboxNeedClear\"] = null;\n        if (cmdParams.continueByClick) {\n            previewWin.playUpdateWait = true;\n            gameLayer.parent.once(EventObject.CLICK, this, function () {\n                previewWin.playUpdateWait = false;\n            });\n        }\n    }\n    else {\n        self[\"___chatboxNeedClear\"] = true;\n    }\n    chatbox.sendImageMessage(cmdParams.actor, cmdParams.content, cmdParams.mode == 0);\n}\nfunction inEditorPlayPreload(onFin, cmdParams) {\n    onFin.apply(this);\n}\nfunction onCommandAttributeBeforeChange(cmd, cmdParams, varName) {\n}\nfunction onCommandAttributeChange(cmd, cmdParams, varName, value) {\n    if (varName == \"content\" || varName == \"mode\" || varName == \"actor\") {\n        previewWin.setData(false);\n    }\n}\nfunction imageLayerOnToolsChangePostion(realSelObjs) {\n}\nfunction imageLayerOnToolsChangeSize(realSelObjs) {\n}\nfunction imageLayerOnToolsChangeRotation(realSelObjs) {\n}\nfunction imageLayerOnToolsChangeStart(realSelObjs) {\n}\nfunction imageLayerOnToolsChangeEnd(realSelObjs) {\n}\nfunction imageLayerOnToolsSelectObject(realSelObjs) {\n}\nfunction imageLayerPassageClear(passageID, passageData) {\n    if (passageData.type == passageType) {\n    }\n}\nfunction imageLayerPassageStart(passageID, passageData) {\n    if (passageData.type == passageType) {\n    }\n}\nfunction showChatBox(isClear) {\n    var chatbox = self[\"__chatbox\"];\n    if (chatbox == null) {\n        chatbox = self[\"__chatbox\"] = new GUI_ChatBox;\n    }\n    uiLayer.addChildAt(chatbox, 0);\n    chatbox.mouseEnabled = false;\n    if (isClear) {\n        if (self[\"__previewChatBoxFrame\"] != __fCount) {\n            self[\"__previewChatBoxFrame\"] = __fCount;\n            chatbox.clearMessages();\n        }\n    }\n    return chatbox;\n}\nvar PLUGIN_GUI_CHAT_MAIN_UI = 4;\nvar PLUGIN_GUI_CHAT_1 = 1007;\nvar PLUGIN_GUI_CHAT_2 = 1008;\nvar PLUGIN_GUI_CHAT_3 = 1009;\nif (typeof self[\"GUI_\" + PLUGIN_GUI_CHAT_MAIN_UI] == \"undefined\") {\n    var GUI_4 = (function (_super) {\n        __extends(GUI_4, _super);\n        function GUI_4() {\n            return _super.call(this, PLUGIN_GUI_CHAT_MAIN_UI) || this;\n        }\n        return GUI_4;\n    }(GUI_BASE));\n    var GUI_1007 = (function (_super) {\n        __extends(GUI_1007, _super);\n        function GUI_1007() {\n            return _super.call(this, PLUGIN_GUI_CHAT_1) || this;\n        }\n        return GUI_1007;\n    }(GUI_BASE));\n    var GUI_1008 = (function (_super) {\n        __extends(GUI_1008, _super);\n        function GUI_1008() {\n            return _super.call(this, PLUGIN_GUI_CHAT_2) || this;\n        }\n        return GUI_1008;\n    }(GUI_BASE));\n    var GUI_1009 = (function (_super) {\n        __extends(GUI_1009, _super);\n        function GUI_1009() {\n            return _super.call(this, PLUGIN_GUI_CHAT_3) || this;\n        }\n        return GUI_1009;\n    }(GUI_BASE));\n    self[\"GUI_\" + PLUGIN_GUI_CHAT_MAIN_UI] = GUI_4;\n    self[\"GUI_\" + PLUGIN_GUI_CHAT_1] = GUI_1007;\n    self[\"GUI_\" + PLUGIN_GUI_CHAT_2] = GUI_1008;\n    self[\"GUI_\" + PLUGIN_GUI_CHAT_3] = GUI_1009;\n    var oldGameDataGetModuleData_1 = self[\"GameData\"].getModuleData;\n    self[\"GameData\"].getModuleData = function (moduleID, dataID) {\n        if (moduleID == PLUGIN_MODULE_TYPE_CHAT_ACTOR) {\n            var a = editor.module.getModuleData(moduleID, dataID);\n            if (a)\n                a = a.attrs;\n            else\n                return null;\n            return {\n                id: dataID,\n                name: editor.module.getModuleDataName(moduleID, dataID),\n                face: a.face.value,\n                intro: a.intro.value\n            };\n        }\n        return oldGameDataGetModuleData_1.apply(this, arguments);\n    };\n}\nif (!self[\"__chatboxInit\"]) {\n    self[\"__chatboxInit\"] = 1;\n    var tsconfig = \"Game/tsconfig.json\";\n    AssetManager.loadJson(tsconfig, Callback.New(function (tsconfigObj) {\n        var dirPath = \"Game/dist\";\n        if (tsconfigObj && tsconfigObj.compilerOptions && tsconfigObj.compilerOptions.outFile) {\n            var outFileArr = tsconfigObj.compilerOptions.outFile.split(\"/\");\n            outFileArr.pop();\n            dirPath = \"Game/\" + outFileArr.join(\"/\");\n        }\n        var url = dirPath + \"/game/project/ui/GUI_ChatBox.js\";\n        AssetManager.loadText(url, Callback.New(function (txt) {\n            if (!txt) {\n                var plugURL = dirPath + \"/GCplug/727/GUI_ChatBox.js\";\n                AssetManager.loadText(plugURL, Callback.New(function (txt) {\n                    if (!txt) {\n                        self[\"__chatboxInit\"] = 0;\n                        return;\n                    }\n                    runJS(txt, url);\n                    self[\"__chatboxInit\"] = 2;\n                }, _this));\n                return;\n            }\n            runJS(txt, url);\n            self[\"__chatboxInit\"] = 2;\n        }, _this));\n    }, this));\n}\nfunction runJS(jsText, url, catchError) {\n    if (catchError === void 0) { catchError = false; }\n    var script = document.createElement(\"script\");\n    script.type = \"text/javascript\";\n    script['name'] = url;\n    document.body.appendChild(script);\n    setTimeout(function (script) {\n        document.body.removeChild(script);\n    }, 0, script);\n    if (catchError) {\n        script.appendChild(document.createTextNode(\"try{\" + jsText + \"}catch(e){trace('\" + url + \"',e)}\"));\n    }\n    else {\n        script.appendChild(document.createTextNode(jsText));\n    }\n}\n"
}